/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import qr.BitHelper;
import qr.EncodingMode;
import qr.QrCode;

import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;
import java.util.Scanner;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class BitsHelperTest {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = BitsHelperTest.class.getResource("tests/"+testfile);
        if (resource != null) {
            File file = Paths.get(resource.toURI()).toFile();
            reader = new FileReader(file);
        }
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test
    public void bit2int_simple_ok() throws URISyntaxException, IOException {
        // Arrange
        var bits = "0101"; // 5
        // Act
        var i = BitHelper.bitsToInt(bits);
        // Assert
        assertEquals(5,i);

    }

    @Test
    public void largerbit2int_simple_ok() throws URISyntaxException, IOException {
        // Arrange
        var bits = "00011111"; // 31
        // Act
        var i = BitHelper.bitsToInt(bits);
        // Assert
        assertEquals(31,i);

    }

    @Test
    public void verlargebit2int_simple_ok() throws URISyntaxException, IOException {
        // Arrange
        var bits = "000111110001111100011111"; // 2039583
        // Act
        var i = BitHelper.bitsToInt(bits);
        // Assert
        assertEquals(2039583,i);

    }

    @Test
    public void int2bit2_simple_ok() throws URISyntaxException, IOException {
        // Arrange
        var bits = "0101"; // 5
        var i = BitHelper.bitsToInt(bits);

        // Act
        var bits2 = BitHelper.intToBits(i);


        // Assert
        assertEquals(bits,bits2);

    }


    @Test
    public void int2largerbit2_simple_ok() throws URISyntaxException, IOException {
        // Arrange
        var bits = "00011111"; // 31
        var i = BitHelper.bitsToInt(bits);

        // Act
        var bits2 = BitHelper.intToBits(i);


        // Assert
        assertEquals(bits,bits2);

    }

    @Test
    public void int2verrylargerbit2_simple_ok() throws URISyntaxException, IOException {
        // Arrange
        var bits = "000111110001111100011111"; // 2039583
        var i = BitHelper.bitsToInt(bits);

        // Act
        var bits2 = BitHelper.intToBits(i);


        // Assert
        assertEquals(bits,bits2);

    }

    @Test
    public void alphaNumeric2Bits_helloccworld_ok() throws URISyntaxException, IOException {
        // Arrange
        var str = "hello cc world";
        var str2 = "hello cc world".toUpperCase();

        // Act
        var bits = BitHelper.alphaNumericStringToBits(str);
        var bits2 = BitHelper.alphaNumericStringToBits(str2);


        // Assert
        var compare = "01100001011011110001101000101110001000101000110011101001000101001101110111110";
        assertEquals(compare, bits);
        assertEquals(compare, bits2);

    }

    @Test
    public void alphaNumeric2Bits_HE_ok() throws URISyntaxException, IOException {
        // Arrange
        var str = "HE";

        // Act
        var bits = BitHelper.alphaNumericStringToBits(str);


        // Assert
        var compare = "01100001011";
        assertEquals(compare, bits);

    }

    @Test
    public void bitsToAlphaNumeric2_HE_ok() throws URISyntaxException, IOException {
        // Arrange
        var compare = "HE";
        var bits = BitHelper.alphaNumericStringToBits(compare);

        // Act
        var str = BitHelper.bitsToAlphaNumericString(bits);

        // Assert
        assertEquals(compare, str);

    }



    @Test
    public void numeric2Bits_8675309_Step_ok() throws URISyntaxException, IOException {
        // Arrange
        var str8 = "86753091";
        var str7 = "8675309";
        var str6 = "867530";

        // Act
        var bits8 = BitHelper.numericStringToBits(str8);
        var bits7 = BitHelper.numericStringToBits(str7);
        var bits6 = BitHelper.numericStringToBits(str6);


        // Assert
        var compare8 = "110110001110000100101011011";
        var compare7 = "110110001110000100101001";
        var compare6 = "11011000111000010010";
        assertEquals(compare8, bits8);
        assertEquals(compare7, bits7);
        assertEquals(compare6, bits6);

    }

    @Test
    public void bitsToNumeric2_8675309_ok() throws URISyntaxException, IOException {
        // Arrange
        var str8 = "86753091";
        var str7 = "8675309";
        var str6 = "867530";
        var bits8 = BitHelper.numericStringToBits(str8);
        var bits7 = BitHelper.numericStringToBits(str7);
        var bits6 = BitHelper.numericStringToBits(str6);

        // Act
        var num8 = BitHelper.bitsToNumericString(bits8);
        var num7 = BitHelper.bitsToNumericString(bits7);
        var num6 = BitHelper.bitsToNumericString(bits6);

        // Assert
        assertEquals(str8, num8);
        assertEquals(str7, num7);
        assertEquals(str6, num6);

    }

    @Test
    public void byteToBits_sentence_ok() {
        // Arrange
        var txt = "Hello, world!";
        var compare = "01001000011001010110110001101100011011110010110000100000011101110110111101110010011011000110010000100001";

        // Action
        var bits = BitHelper.byteStringToBits(txt);

        // Assert
        assertEquals(compare, bits);

    }

    @Test
    public void bitesToBytes_sentence_ok() {
        // Arrange
        var compare = "Hello, world!";
        var bits = "01001000011001010110110001101100011011110010110000100000011101110110111101110010011011000110010000100001";

        // Action
        var txt = BitHelper.bitsToByteString(bits);

        // Assert
        assertEquals(compare, txt);

    }

    @Test
    public void kanjiToBits_sentence_ok() throws UnsupportedEncodingException {
        var kanji = "茗荷";
        var bytes = kanji.getBytes("Shift_JIS");
        var compare = "11010101010100011010010111";

        // Action
        var bits = BitHelper.kanjiStringToBits(kanji);

        // Assert
        assertEquals(compare, bits);
    }

    @Test
    public void bitsTokanji_sentence_ok() throws UnsupportedEncodingException {
        var compare = "茗荷";
        var kanjibits = "11010101010100011010010111";

        // Action
        var str = BitHelper.bitsToKanjiString(kanjibits);

        // Assert
        assertEquals(compare, str);
    }

}
