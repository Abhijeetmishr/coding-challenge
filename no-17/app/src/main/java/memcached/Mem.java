package memcached;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.concurrent.Callable;
import java.util.logging.Logger;

import memcached.client.MemcachedClient;
import memcached.server.MemcachedServer;
import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

@Command(name = "mem", mixinStandardHelpOptions = true, version = "mem 1.0", description = "This challenge is to build your own memcached server")
public class Mem implements Callable<Result> {
    private static final String DEFAULT_HOSTNAME = "localhost";
    private static final int DEFAULT_PORT = 11211;
    private static Logger _logger = Logger.getLogger(Mem.class.getName());

    public static void main(String[] args) {
        var mem = new Mem();
        var cmd = new CommandLine(mem);
        var exitCode = cmd.execute(args);
        cmd.getExecutionResult();
        System.exit(exitCode);
    }

    @Option(names = "-p", description = "-p specifies the port. default " + DEFAULT_PORT)
    int port = DEFAULT_PORT;
    @Option(names = "-n", description = "-n specifies a constant server name. default " + DEFAULT_HOSTNAME)
    String serverName = DEFAULT_HOSTNAME;

    @Option(names = "-servers", description = "-servers specifies the list of server ids separated by , and only used if client mode. default "
            + DEFAULT_HOSTNAME + ":" + DEFAULT_PORT)
    String serverIds = DEFAULT_HOSTNAME + ":" + DEFAULT_PORT;

    @Option(names = "-s", arity = "0..", description = "-s specifies if its a server or a client. default false means client")
    boolean isServer = false;

    @Override
    public Result call() throws Exception {
        if (isServer) {
            if (this.port == DEFAULT_PORT) {
                _logger.info(String.format("starting '%s' on the default port %d", this.serverName, this.port));
            } else {
                _logger.info(String.format("starting '%s' on port %d", this.serverName, this.port));
            }
            new MemcachedServer(this.serverName, this.port).start();
        } else {
            _logger.info(String.format("Client connected to '%s'", this.serverIds));
            var client = new MemcachedClient(this.serverIds);
            client.startAndInput();

        }
        return new Result();
    }
}