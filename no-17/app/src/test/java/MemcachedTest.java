/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import memcached.client.MemcachedClient;

class MemcachedTest {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = MemcachedTest.class.getResource("tests/" + testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new FileReader(file);
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test
    void start_localserver_expectfailbecause_of_unknown_server() throws URISyntaxException, IOException {

        // Arrange
        var client = new MemcachedClient("anyserver:11111");
        try {
            // Act
            var started = client.start();
            var server = client.getServers()[0];

            // Assert
            assertFalse(started);
            assertEquals("anyserver", server.hostName);
            assertEquals(false, server.isStarted());
            assertEquals(11111, server.port);
        } finally {
            client.close();
        }
    }

    @Test
    void start_localserver_expectsOkorNot() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var client = new MemcachedClient("localhost:11211");
        try {

            // Act
            var serverObject = client.getServers()[0];

            // Assert
            assertEquals("localhost", serverObject.hostName);
            assertEquals(11211, serverObject.port);
        } finally {
            client.close();
        }
    }

}
