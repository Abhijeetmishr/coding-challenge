/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import qr.EncodingMode;
import qr.QrCode;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;
import java.util.Scanner;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class QrModeTest {

    private Reader reader;

    void ReadReader(String testfile) throws IOException, URISyntaxException {
        URL resource = QrModeTest.class.getResource("tests/"+testfile);
        if (resource != null) {
            File file = Paths.get(resource.toURI()).toFile();
            reader = new FileReader(file, StandardCharsets.UTF_8);
        }
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test
    public void detectmode_valid_ok() throws URISyntaxException, IOException {
        // Arrange
        ReadReader("step1/valid.modes.txt");
        var scanner = new Scanner(this.reader);
        while (scanner.hasNext()) {
            var line = scanner.nextLine();
            var splitted = line.split("=");
            var data = splitted[0];
            var expectedMode = EncodingMode.valueOf(splitted[1]);

            // Act
            var qr = new QrCode(data);
            var mode = qr.mode();


            // Assert
            assertEquals(expectedMode, mode, "mode must be "+expectedMode+" for '"+data+"'");
        }
    }


}
