/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import nats.runtime.Subject;

class SubjectTests {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = SubjectTests.class.getResource("tests/" + testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new FileReader(file);
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test
    void valid_simple1_expectOk() throws URISyntaxException, IOException {
        String[] tests = {
                "FOO",
                "BAR",
                "foo.bar",
                "foo.BAR",
                "FOO.BAR",
                "FOO.BAR.BAZ",
                "foo.*.baz",
                "foo.>",
                ">",
                "*.bar",
                "bar.*.>",
                "bar.>"
        };
        for (String subject : tests) {
            // Arrange
            var subj = new Subject(subject);

            // Action
            var valid = subj.isValid();

            // Assert
            assertEquals(true, valid, subject);

        }
    }

    @Test
    void valid_simple1_expectNotOk() throws URISyntaxException, IOException {
        String[] subjects = {
                "FOO. BAR",
                "foo. .bar",
                "foo..bar",
                "foo*.bar",
                "f*o.b*r",
                "foo>",
                ">.bar",
                "bar.*>",
                "bar>"
        };
        for (String subject : subjects) {
            // Arrange
            var subj = new Subject(subject);

            // Action
            var valid = subj.isValid();

            // Assert
            assertEquals(false, valid, subject);

        }
    }

    @Test
    void wildcardTo_subject_expectOk() throws URISyntaxException, IOException {
        String[] tests = {
                "FOO", "FOO",
                "BAR", "BAR",
                "foo.bar", "foo.bar",
                "foo.BAR", "foo.BAR",
                "FOO.BAR", "FOO.BAR",
                "FOO.BAR.BAZ", "FOO.BAR.BAZ",
                "foo.*.baz", "foo.test.baz",
                "foo.>", "foo.abc.def.abc",
                ">", "any.thing.that.counts",
                ">", "any",
                "*.bar", "foo.bar",
                "bar.*.>", "bar.any.thing.thing.thing",
                "bar.>", "bar.any.any.any",
                "bar.>", "bar.any"
        };
        for (int i = 0; i < tests.length; i++) {
            var subject = tests[i++];
            var compareSubject = tests[i];
            // Arrange
            var subj = new Subject(subject);
            var compSubj = new Subject(compareSubject);

            // Action
            var valid = subj.subscribedTo(compSubj);

            // Assert
            assertTrue(valid, "'" + subject + "' matched '" + compareSubject + "'");

        }
    }

    @Test
    void wildcardTo_subjectWrong_expectNotOk() throws URISyntaxException, IOException {
        String[] tests = {
                "FOO", "FOO1",
                "BAR", "BAR2",
                "foo.bar", "foo1.bar",
                "foo.BAR", "FOO.BAR",
                "FOO.BAR", "FOO",
                "FOO.BAR.BAZ", "FOO.*.BAZ",
                "foo.*.baz", "foo..baz",
                "foo.>", "foo",
                ">", ">",
                ">", ">",
                "*.bar", "bar",
                "bar.*.>", "bar.any",
                "bar.>", "bar",
                "bar.>", "bar"
        };
        for (int i = 0; i < tests.length; i++) {
            var subject = tests[i++];
            var compareSubject = tests[i];
            // Arrange
            var subj = new Subject(subject);
            var compSubj = new Subject(compareSubject);

            // Action
            var valid = subj.subscribedTo(compSubj);

            // Assert
            assertFalse(valid, "'" + subject + "' !matched '" + compareSubject + "'");

        }
    }
}
