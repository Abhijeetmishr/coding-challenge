/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.Arrays;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import lisp.parser.Token;
import lisp.parser.Tokenizer;

class LispTokenizerTests {

    private BufferedReader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = LispTokenizerTests.class.getResource("tests/" + testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new BufferedReader(new FileReader(file));
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test
    void tokenize_atom_expectok() throws URISyntaxException, IOException {
        // Arrange
        ReadReader("step1/valid.atoms.txt");
        Token[] results = { Token.SYMBOL, Token.KEYWORD, Token.NUMBER, Token.STRING, Token.PACKAGE, Token.BUILTIN,
                Token.NUMBER_DOUBLE, Token.NUMBER_INTEGER };

        // Action
        var line = reader.readLine();
        while (line != null) {
            var lineReader = new BufferedReader(new StringReader(line));
            var token = new Tokenizer(lineReader).nextToken();
            // Assert

            System.out.println("Line=" + line + ", " + token);
            assertNotNull(token);
            assertTrue(token.isPresent());
            assertEquals(line, token.get().getValue());
            assertTrue(Arrays.asList(results).contains(token.get().getToken()),
                    String.format("Line '%s' is %s", line, token.get().getToken()));
            line = reader.readLine();
        }
    }

    @Test
    void tokenize_strings_expectok() throws URISyntaxException, IOException {
        // Arrange
        ReadReader("step1/valid.strings.txt");
        Token[] results = { Token.STRING, Token.SYMBOL, Token.QUOTE };

        // Action
        var line = reader.readLine();
        while (line != null) {
            var lineReader = new BufferedReader(new StringReader(line));
            var token = new Tokenizer(lineReader).nextToken();
            // Assert

            System.out.println("Line=" + line + ", " + token);
            assertNotNull(token);
            assertTrue(token.isPresent());
            assertTrue(line.contains(token.get().getValue()));
            assertTrue(Arrays.asList(results).contains(token.get().getToken()),
                    String.format("Line '%s' is %s", line, token.get().getToken()));
            if (token.get().getToken() == Token.SYMBOL) {
                assertTrue(token.get().getValue().startsWith("'"),
                        String.format("Line '%s' is %s", line, token.get().getToken()));
            }
            line = reader.readLine();
        }
    }

    @Test
    void tokenize_keywords_expectok() throws URISyntaxException, IOException {
        // Arrange
        ReadReader("step1/valid.keywords.txt");
        Token[] results = { Token.KEYWORD };

        // Action
        var line = reader.readLine();
        while (line != null) {
            var lineReader = new BufferedReader(new StringReader(line));
            var token = new Tokenizer(lineReader).nextToken();
            // Assert

            System.out.println("Line=" + line + ", " + token);
            assertNotNull(token);
            assertTrue(token.isPresent());
            assertEquals(line, token.get().getValue());
            assertTrue(Arrays.asList(results).contains(token.get().getToken()),
                    String.format("Line '%s' is %s", line, token.get().getToken()));
            line = reader.readLine();
        }
    }

    @Test
    void tokenize_s_expressions_expectok() throws URISyntaxException, IOException {
        // Arrange
        ReadReader("step1/valid.s-expressions.txt");
        Token[] results = { Token.S_EXPRESSION };

        // Action
        var line = reader.readLine();
        while (line != null) {
            var lineReader = new BufferedReader(new StringReader(line));
            var token = new Tokenizer(lineReader).nextToken();
            // Assert

            System.out.println("Line=" + line + ", " + token);
            assertNotNull(token);
            assertTrue(token.isPresent());
            assertEquals(line, token.get().getValue());
            assertTrue(Arrays.asList(results).contains(token.get().getToken()),
                    String.format("Line '%s' is %s", line, token.get().getToken()));
            line = reader.readLine();
        }
    }

}
