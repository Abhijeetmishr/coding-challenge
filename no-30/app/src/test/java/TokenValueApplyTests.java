/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import lisp.parser.LispRuntime;
import lisp.parser.Parser;

class TokenValueApplyTests {

    private BufferedReader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = TokenValueApplyTests.class.getResource("tests/" + testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new BufferedReader(new FileReader(file));
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test
    void apply_symbol() throws URISyntaxException, IOException {

        // Arrange
        var token = new Parser("123").parse().get(0);
        var runtime = new LispRuntime();

        // Act
        var result = token.apply(runtime);
        var dResult = result.getDouble();

        // Assert
        assertEquals(123.0, dResult);

    }

    @Test
    void apply_add() throws URISyntaxException, IOException {

        // Arrange
        var token = new Parser("(+ 1 2 3)").parse().get(0);
        var runtime = new LispRuntime();

        // Act
        var result = token.apply(runtime);
        var dResult = result.getDouble();

        // Assert
        assertEquals(6.0, dResult);

    }

    @Test
    void tokenize_s_expressions_expectok() throws URISyntaxException, IOException {
        // Arrange
        ReadReader("step1/valid-builtins.txt");
        var runtime = new LispRuntime();

        // Action
        var line = reader.readLine();
        while (line != null) {
            if (!line.startsWith("#")) {
                var token = new Parser(line).parse().get(0);
                var result = token.apply(runtime);

                // Assert
                assertNotNull(result);
                var builder = new StringBuilder();
                token.appendTo(builder).append("=").append(result.toString());
                System.out.println(builder.toString());

            }
            line = reader.readLine();
        }
    }

}
