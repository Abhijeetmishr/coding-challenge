/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

import dns.*;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

class DnsMessageTests {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = DnsMessageTests.class.getResource("tests/" + testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new FileReader(file);
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    public static String nospace(String str) {
        return str.replace(" ", "").toUpperCase();
    }

    @Test
    void header_22rec_expectsok() throws IOException {
        // Arrange
        var msg = new DnsMessage(22, dns.Flags.RECURSION_DESIRED);
        var writer = new OctetWriter();

        // Act
        msg.write(writer);

        // Assert
        assertEquals(nospace("0016 0100 0000 0000 0000 0000"), writer.toString());

    }

    @Test
    void header_65535rec_expectsok() throws IOException {
        // Arrange
        var msg = new DnsMessage(65535, 65535);
        var writer = new OctetWriter();

        // Act
        msg.write(writer);

        // Assert
        assertEquals(nospace("FFFF FFFF 0000 0000 0000 0000"), writer.toString());

    }

    @Test
    void flag_recursiveReq_expectsok() {
        // Arrange

        // Act
        var flag = dns.Flags.RECURSION_DESIRED;

        // Assert
        assertEquals(256, flag);

    }

    @Test
    void encodedNameHex_com_expectsok() throws IOException {
        // Arrange
        var tld = "com";

        // Act
        var msg = new OctetWriter().appendQName(tld).toString();

        // Assert

        assertEquals(nospace("03 636F6D 00"), msg);

    }

    @Test
    void question_default_expectsok() throws IOException {
        // Arrange
        var domain = "dns.google.com";

        // Act
        var q = new DnsQuestion(domain, dns.HeaderFlags.QTYPE_A);

        // Assert
        assertEquals(dns.HeaderFlags.QCLASS_INTERNET, q.getClazz());
        assertEquals(dns.HeaderFlags.QTYPE_A, q.getType());
        assertEquals(domain, q.getName());

    }

    @Test
    void fromOctedStream_default_expectsok() throws IOException {
        // Arrange
        var msg = "dns.google.com";
        var octet = nospace("03 646E73 06 676F6F676C65 03 636F6D 00 0001 0001");
        var stream = new OctetReader(octet);

        // Act
        var q = new DnsQuestion(stream);

        // Assert
        assertEquals(dns.HeaderFlags.QCLASS_INTERNET, q.getClazz());
        assertEquals(dns.HeaderFlags.QTYPE_A, q.getType());
        assertEquals(msg, q.getName());

    }

    @Test
    void questionencoded_default_expectsok() throws IOException {
        // Arrange
        var q = new DnsQuestion("www.google.com", dns.HeaderFlags.QTYPE_A);
        var writer = new OctetWriter();

        // Act
        q.write(writer);

        // Assert
        assertEquals(nospace("03 777777 06 676F6F676C65 03 636F6D 00 0001 0001"), writer.toString());

    }

    @Test
    void fullquestion_default_expectsok() throws IOException {
        // Arrange
        var msg = new DnsMessage(65535, 65535);
        var q = new DnsQuestion("www.google.com", dns.HeaderFlags.QTYPE_A);
        msg.addQuestion(q);
        var writer = new OctetWriter();

        // Act
        q.write(writer);

        // Assert
        assertEquals(nospace("03 777777 06 676F6F676C65 03 636F6D 00 0001 0001"), writer.toString());

    }

    @Test
    void fullmsg_default_expectsok() throws IOException {
        // Arrange
        var msg = new DnsMessage(22, dns.Flags.QR_QUERY | dns.Flags.RECURSION_DESIRED);
        var q = new DnsQuestion("dns.google.com", HeaderFlags.QTYPE_A);
        msg.addQuestion(q);
        var writer = new OctetWriter();

        // Act
        msg.write(writer);

        // Assert
        assertEquals(nospace("0016 0100 0001 0000 0000 0000 03 646e73 06 676f6f676c65 03 636f6d 00 0001 0001"), writer.toString());

    }

    @Test
    void octetFullMsg_default_expectsok() throws IOException {
        // Arrange
        var octet = nospace("0016 0100 0001 0000 0000 0000 03 646e73 06 676f6f676c65 03 636f6d 00 0001 0001");

        // Act
        var msg = new DnsMessage(new OctetReader(octet));

        // Assert
        assertEquals(22, msg.getId());
        assertEquals(dns.Flags.QR_QUERY | Flags.RECURSION_DESIRED, msg.getFlags());
        assertEquals(1, msg.getQuestionCount());
        assertEquals("dns.google.com", msg.getQuestions().get(0).getName());

    }

    @Test
    void fullResponse_fromDNS_expectok() throws IOException {
        // Arrange
        var octet = nospace("0016 8080 0001 0002 0000 0000 03646e73 06676f6f676c65 03636f6d 00 0001 0001 c00c 0001 0001 00000214 0004 08080808 c00c0001000100000214000408080404");

        // Act
        var msg = new DnsMessage(new OctetReader(octet));
        var ipAddresses = msg.getIpAddresses();

        // Assert
        assertEquals(22, msg.getId());
        assertEquals("dns.google.com", msg.getAnswers().get(0).getName());
        assertEquals(2, ipAddresses.size());
        assertEquals("8.8.4.4", ipAddresses.get(0));
        assertEquals("8.8.8.8", ipAddresses.get(1));

    }
    @Test
    void fullResponse_jarowach_expectok() throws IOException {
        // Arrange
        var octet = nospace("00168080000100000005000003777777066A61726F77610263680000FF0001C017000200010001919500080164036E6963C017C017000200010001919500040166C02DC017000200010001919500040165C02DC017000200010001919500040162C02DC017000200010001919500040161C02D");

        // Act
        var msg = new DnsMessage(new OctetReader(octet));
        var ipAddresses = msg.getIpAddresses();

        // Assert
        assertEquals(22, msg.getId());
        assertEquals(5, msg.getAuthorities().size());

    }

    @Test
    void fullResponse_dorislorenz2ndcall_expectok() throws IOException {
        // Arrange
        var octet = nospace("001680800001000000030004037777770C646F7269732D6C6F72656E7A0263680000010001C010000200010000049C000B0263680370726F02696F00C010000200010000049C0005026E6CC034C010000200010000049C000B017003646E68036E657400C048000100010000878500049750C558C03100010001000087850004504A8FA9C048001C0001000087850010200141D000081C8D0000000000000000C031001C00010000878500102A001128000100010000000001430169");

        // Act
        var msg = new DnsMessage(new OctetReader(octet));
        var ipAddresses = msg.getIpAddresses();

        // Assert
        assertEquals(22, msg.getId());
        assertEquals(2, ipAddresses.size());

    }



}
