/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import dns.DnsMessage;
import dns.DnsMessage.Flags;
import dns.DnsMessage.HeaderFlags;
import dns.DnsQuestion;

class DnsMessageTests {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = DnsMessageTests.class.getResource("tests/" + testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new FileReader(file);
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    public static String nospace(String str) {
        return str.replace(" ", "").toUpperCase();
    }

    @Test
    void header_22rec_expectsok() {
        // Arrange
        var msg = new DnsMessage(22, Flags.RECURSION_DESIRED);
        var builder = new StringBuilder();

        // Act
        msg.buildHeader(builder);

        // Assert
        assertEquals(nospace("0016 0100 0000 0000 0000 0000"), builder.toString());

    }

    @Test
    void header_65535rec_expectsok() {
        // Arrange
        var msg = new DnsMessage(65535, 65535);
        var builder = new StringBuilder();

        // Act
        msg.buildHeader(builder);

        // Assert
        assertEquals(nospace("FFFF FFFF 0000 0000 0000 0000"), builder.toString());

    }

    @Test
    void flag_recursiveReq_expectsok() {
        // Arrange

        // Act
        var flag = Flags.RECURSION_DESIRED;

        // Assert
        assertEquals(256, flag);

    }

    @Test
    void encodedNameHex_com_expectsok() {
        // Arrange

        // Act
        var q = new DnsQuestion("com");

        // Assert

        assertEquals(nospace("03 636F6D 00"), q.encodedNameToHex());

    }

    @Test
    void question_default_expectsok() {
        // Arrange

        // Act
        var q = new DnsQuestion("dns.google.com");

        // Assert
        assertEquals(HeaderFlags.QCLASS_INTERNET, q.getClazz());
        assertEquals(HeaderFlags.QTYPE_A, q.getType());
        assertEquals(nospace("03 646E73 06 676F6F676C65 03 636F6D 00"), q.encodedNameToHex());

    }

    @Test
    void questionencoded_default_expectsok() {
        // Arrange
        var q = new DnsQuestion("www.google.com");
        var builder = new StringBuilder();

        // Act
        q.buildHeader(builder);

        // Assert
        assertEquals(nospace("03 777777 06 676F6F676C65 03 636F6D 00 0001 0001"), builder.toString());

    }

    @Test
    void fullquestion_default_expectsok() {
        // Arrange
        var msg = new DnsMessage(65535, 65535);
        var q = new DnsQuestion("www.google.com");
        msg.setQuestion(q);
        var builder = new StringBuilder();

        // Act
        q.buildHeader(builder);

        // Assert
        assertEquals(nospace("03 777777 06 676F6F676C65 03 636F6D 00 0001 0001"), builder.toString());

    }

    @Test
    void fullmsg_default_expectsok() {
        // Arrange
        var msg = new DnsMessage(22, Flags.QR_QUERY | Flags.RECURSION_DESIRED);
        var q = new DnsQuestion("dns.google.com");
        msg.setQuestion(q);
        var builder = new StringBuilder();

        // Act
        msg.build(builder);

        // Assert
        assertEquals(nospace("0016 0100 0001 0000 0000 0000 03 646e73 06 676f6f676c65 03 636f6d 00 0001 0001"), builder.toString());

    }
}
