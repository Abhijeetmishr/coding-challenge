/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import compress.Compress;
import compress.Compressor;
import compress.model.HuffLeafNode;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

class HuffmanCodingTreeTest {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = HuffmanCodingTreeTest.class.getResource("tests/"+testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new FileReader(file);
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }


    @Test void buildTree_simple_expectsOK() throws URISyntaxException, IOException {

        //Arrange
        var compress = new Compressor();
        compress.buildTree("aaabbc");

        //Action
        var occA = compress.getOccurances('a');
        var occB = compress.getOccurances('b');
        var occC = compress.getOccurances('c');

        // Assert
        assertEquals(3, occA);
        assertEquals(2, occB);
        assertEquals(1, occC);

    }


    @Test void nodes_simple_expectsOK() throws URISyntaxException, IOException {

        //Arrange
        var compress = new Compressor();
        compress.buildTree("aaabbc");

        //Action
        var nodeA = compress.node('a');

        // Assert
        assertEquals("a", nodeA.valueString());
        assertEquals(3, nodeA.weight());
        assertEquals(BigInteger.valueOf(10), nodeA.code());

    }


    

    @Test void buildTree_duplicates_expectsOK() throws URISyntaxException, IOException {

        //Arrange
        var compress = new Compressor();
        compress.buildTree("aabbccdef");

        //Action
        var occA = compress.getOccurances('a');
        var occB = compress.getOccurances('b');
        var occC = compress.getOccurances('c');
        var occD = compress.getOccurances('d');
        var occE = compress.getOccurances('e');
        var occF = compress.getOccurances('f');

        // Assert
        assertEquals(2, occA);
        assertEquals(2, occB);
        assertEquals(2, occC);
        assertEquals(1, occD);
        assertEquals(1, occE);
        assertEquals(1, occF);

    }

    private void assertNode(Compressor compress, int ch, String str, int w, BigInteger c) {
        var node = compress.node(ch);
        assertEquals(str, node.valueString());
        assertEquals(w, node.weight());
        assertEquals(c, node.code());

    }

    @Test void nodes_duplicates_expectsOK() throws URISyntaxException, IOException {

        //Arrange
        var compress = new Compressor();
        compress.buildTree("aabbccdef");

        //Action
        // Assert

        assertNode(compress, 'a', "a", 2, BigInteger.valueOf(1111));
    }


    @Test void decode_duplicates_expectsOK() throws URISyntaxException, IOException {

        //Arrange
        var compress = new Compressor();
        compress.buildTree("aabbccdef");

        var input = "aabbccdef";
        var enc = compress.encode(input);
        //Action
        var dec = compress.decode(enc);

        // Assert
        assertEquals(input, dec);

    }
}
