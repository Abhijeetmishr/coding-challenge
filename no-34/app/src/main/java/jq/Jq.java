package jq;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.io.File;
import java.util.concurrent.Callable;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;

@Command(name = "jq", mixinStandardHelpOptions = true, version = "jq 1.0", description = "This challenge is to build your own jq - see https://codingchallenges.fyi/challenges/challenge-jq")
public class Jq implements Callable<Result> {

    public static int VERBOSE = 0;

    public static boolean verbose() {
        return verbose1();
    }

    public static boolean verbose1() {
        return VERBOSE >= 1;
    }
    public static boolean verbose2() {
        return VERBOSE >= 2;
    }

    public static void main(String[] args) {
        var jq = new Jq();
        var cmd = new CommandLine(jq);
        var exitCode = cmd.execute(args);
        cmd.getExecutionResult();
        System.exit(exitCode);
    }

    @Parameters(index = "0", arity = "0..1", description = "jq filter expressions - default '.'")
    String jqFilter = ".";

    @Parameters(index = "1", arity = "0..N", description = "files - optional")
    File[] files;

    //@Option(names = "-t", description = "-b specifies byte positions")
    //int test = 8080;
    @Option(names = "-v", description = "-v specifies verbose level")
    boolean verbose1 = false;

    @Option(names = "-vv", description = "-vv specifies verbose level 2")
    boolean verbose2 = false;

    @Override
    public Result call() throws Exception {
        JsonQuery jq;
        if (files != null && files.length > 0) {
            jq = new JsonQuery(new FileInput(files));
        } else {
            jq = new JsonQuery(new SystemIn());
        }
        jq.execute(jqFilter);
        return new Result();
    }
}