/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import lisp.parser.LispRuntime;
import lisp.parser.TokenValue;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.*;

class BuiltInTests {

    private BufferedReader reader;
    private LispRuntime runtime;

    @BeforeEach
    public void initLibrary() {
        this.runtime = new LispRuntime();
    }

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = BuiltInTests.class.getResource("tests/" + testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new BufferedReader(new FileReader(file));
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }


    @Test
    void makeArray_1dim_zeros() throws URISyntaxException, IOException {
        // Assert
        var result = runtime.execute("(make-array '20)");

        // Assert
        assertEquals(TokenValue.NIL,result.get(0));
        assertEquals(TokenValue.NIL,result.get(19));
    }

    @Test
    void makeArray_2dim_random_zeros() throws URISyntaxException, IOException {
        // Arrange
        var result = runtime.execute("(make-array '(3 4) :element-type 'float :initial-element (random))");

        // Action Assert
        var val00 = result.get(0,0).getDouble();
        var val23 = result.get(2,3).getDouble();
        assertTrue(val00 >= 0 && val00 < 1.0);
        assertTrue(val23 >= 0 && val23 < 1.0);
    }

    @Test
    void makeArray_2dim_outofindex() throws URISyntaxException, IOException {
        // Arrange

        var result = runtime.execute("(make-array '(3 4) :element-type 'float :initial-element (random))");

        // Action Assert

        assertThrows(IllegalArgumentException.class, new Executable() {
            @Override
            public void execute() throws Throwable {
                result.get(3,2);
            }
        });

    }

    @Test
    void makeArray_2dim_outofindexdimension() throws URISyntaxException, IOException {
        // Arrange
        var result = runtime.execute("(make-array '(3 4) :element-type 'float :initial-element (random))");

        // Action Assert

        assertThrows(IllegalArgumentException.class, new Executable() {
            @Override
            public void execute() throws Throwable {
                result.get(2,2,1);
            }
        });

    }
}
