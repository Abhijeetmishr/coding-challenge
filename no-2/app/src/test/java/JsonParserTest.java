/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestFactory;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.platform.commons.annotation.Testable;

import json.JsonParser;
import json.JsonParserException;
import json.Lexer;
import json.model.JObject;

import static org.junit.jupiter.api.Assertions.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

class JsonParserTest {

    private Reader reader;

    void ReadReader(String testfile) throws URISyntaxException, IOException {
        if (reader != null) {
            reader.close();
            reader = null;
        }
        URL resource = JsonParserTest.class.getResource("tests/"+testfile);
        if (resource != null) {
            File file = Paths.get(resource.toURI()).toFile();
            if (file != null) {
                reader = new FileReader(file);
            }
        }
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    private String JsonTestFile(String prefix, int index) {
        return (index == 1 ? prefix : prefix + index)+".json"; 
    }

    @ParameterizedTest
    @CsvSource({
        "valid, step1, 1", 
        "invalid, step1, 1",

        "valid, step2, 1", 
        "valid, step2, 2", 
        "invalid, step2, 1",
        "invalid, step2, 2",

        "valid, step3, 1", 
        "invalid, step3, 1",

        "valid, step4, 1", 
        "valid, step4, 2", 
        "invalid, step4, 1",

        "valid, step5, 1", 
        "valid, step5, 2", 
        "valid, step5, 3", 
        "valid, step5, 4", 
        "valid, step5, 5", 
        "valid, step5, 6", 

        "invalid, step5, 1",
        "invalid, step5, 2",
        "invalid, step5, 3",
        "invalid, step5, 4",
        "invalid, step5, 5",
        "invalid, step5, 6",
        "invalid, step5, 7",
        "invalid, step5, 8",
        "invalid, step5, 9",
        "invalid, step5, 10",
        "invalid, step5, 11",
        "invalid, step5, 12",
        "invalid, step5, 13",
        "invalid, step5, 14",
        "invalid, step5, 15",

    })
    void validX_stepX_expectok(String type, String step, int index) throws URISyntaxException, IOException, JsonParserException {

        //Arrange
        ReadReader(JsonTestFile(step+"/"+type, index));
        Lexer lexer = new Lexer(this.reader);
        JsonParser parser = new JsonParser(lexer);

        if (type.equals("valid")) {
            //Action
            var object = parser.parse();

            //Assert
            assertNotNull(object, "parse failed");
        } else {
            //Action
            //Assert
            assertThrows(JsonParserException.class, () -> parser.parse());

        }

    }
}
