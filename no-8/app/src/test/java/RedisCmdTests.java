/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import redis.resp.RespPipelineInlineScanner;
import redis.resp.RespRequest;
import redis.resp.cache.RedisCache;
import redis.resp.commands.RespCommand;
import redis.resp.commands.RespCommandException;
import redis.resp.commands.library.CmdEcho;
import redis.resp.commands.library.CmdPing;
import redis.resp.commands.library.CmdSet;
import redis.resp.commands.library.RespCommandLibrary;
import redis.resp.types.RespArray;
import redis.resp.types.RespBulkString;
import redis.resp.types.RespSimpleString;
import redis.resp.types.RespType;

class RedisCmdTests {

    private RespBulkString bulk;
    private RespArray bulkArray;

    private RespCommandLibrary lib;
    private RedisCache cache;
    private RespCommand command;

    @BeforeEach
    void setup() {
        lib = new RespCommandLibrary();
        cache = new RedisCache();
    }

    private RespRequest getRequestFromType(RespType type) {
        var bulkArray = new RespArray(type);
        var command = new RespCommand(bulkArray);
        return new RespRequest(cache, command);
    }

    private RespRequest getRequestFromString(String str) throws RespCommandException {
        var scanner = new RespPipelineInlineScanner(str);
        var command = scanner.getCommands().get(0);
        return new RespRequest(cache, command.toCommand());
    }

    @Test
    void ping_empty_expectspong() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        var ping = new CmdPing(lib);
        var request = getRequestFromString("PING");

        // Act
        var response = ping.execute(request);
        var pong = (RespBulkString) response.values[0];

        // Assert
        assertEquals("PONG", pong.value);

    }

    @Test
    void ping_message_expectshello() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        var ping = new CmdPing(lib);
        var request = getRequestFromString("PING hello-world");

        // Act
        var response = ping.execute(request);
        var pong = (RespBulkString) response.values[0];

        // Assert
        assertEquals("hello-world", pong.value);

    }

    @Test
    void echo_message_expectsmessage() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        var ping = new CmdEcho(lib);
        var request = getRequestFromString("ECHO this-is-a-echo-test");

        // Act
        var response = ping.execute(request);
        var echo = (RespBulkString) response.values[0];

        // Assert
        assertEquals("this-is-a-echo-test", echo.value);

    }

    @Test
    void set_mykey_message_expectsOK_and_test() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        var set = new CmdSet(lib);
        var request = getRequestFromString("set mykey this-is-a-set-test");

        // Act
        var response = set.execute(request);
        var responseType = (RespSimpleString) response.values[0];
        Optional<RespType> cacheObject = cache.get("mykey");

        // Assert
        assertEquals("OK", responseType.value);
        assertTrue(cacheObject.isPresent());
        assertEquals("this-is-a-set-test", cacheObject.get().value);

    }

    @Test
    void set_mykey_messagetwice_expectspong() throws URISyntaxException, IOException, RespCommandException {

        // Arrange
        var set = new CmdSet(lib);
        var request = getRequestFromString("set mykey this-is-the-first-string");
        set.execute(request);

        // Act
        var request2 = getRequestFromString("set mykey this-is-the-second-string");
        var response2 = set.execute(request2);
        var responseType2 = (RespSimpleString) response2.values[0];
        var cacheObject = cache.get("mykey");

        // Assert
        assertEquals("OK", responseType2.value);
        assertTrue(cacheObject.isPresent());
        assertEquals("this-is-the-second-string", cacheObject.get().value);

    }
}
