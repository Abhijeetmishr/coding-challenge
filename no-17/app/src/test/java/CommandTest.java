/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringWriter;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import memcached.commands.AddCommand;
import memcached.commands.AppendCommand;
import memcached.commands.CasCommand;
import memcached.commands.Command;
import memcached.commands.CommandLine;
import memcached.commands.Data;
import memcached.commands.DataCommand;
import memcached.commands.DecrCommand;
import memcached.commands.DeleteCommand;
import memcached.commands.GetCommand;
import memcached.commands.IncrCommand;
import memcached.commands.PrependCommand;
import memcached.commands.ReplaceCommand;
import memcached.commands.SetCommand;
import memcached.commands.ValidationCode;
import memcached.commands.ValidationException;
import memcached.server.cache.CacheContext;
import memcached.server.cache.MemCache;

class CommandTest {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = CommandTest.class.getResource("tests/" + testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new FileReader(file);
    }

    private String randomKey(String prefix) {
        var rnd = ((int) Math.floor(Math.random() * 10000));
        return String.format("%s%d", prefix, rnd);
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test
    void getcmd_simple_expectsok() throws URISyntaxException, IOException {

        // Arrange
        var key = randomKey("asdf");

        // Act
        var cmd = new GetCommand(key);

        // Assert
        assertEquals("get", cmd.type);
        assertEquals(key, cmd.key);

    }

    @Test
    void getcmd_2keys_expectsok() throws URISyntaxException, IOException {

        // Arrange
        var key = randomKey("asdf");
        var key2 = randomKey("asdf");
        String[] keys = { key, key2, key };

        // Act
        var cmd = new GetCommand(key, key2, key);

        // Assert
        assertEquals("get", cmd.type);
        assertEquals(key, cmd.key);
        assertArrayEquals(keys, cmd.keys);

    }

    @Test
    void setcmd_simple_expectsNoValue() throws URISyntaxException, IOException {

        // Arrange
        var key = randomKey("asdf");
        var value = randomKey("test");

        // Act
        var cmd = new SetCommand(key, value);

        // Assert
        assertEquals("set", cmd.type);
        assertEquals(key, cmd.key);
        assertEquals(value, cmd.data.data);
        assertEquals(0, cmd.flags());
        assertEquals(0, cmd.exptime());
        assertEquals(false, cmd.noreply());

    }

    @Test
    void setcmd_complexnoreply_expectsNoValue() throws URISyntaxException, IOException {

        // Arrange
        var key = randomKey("asdf");
        var value = randomKey("test");

        // Act
        var cmd = new SetCommand(key, value, 47, 300, true);

        // Assert
        assertEquals("set", cmd.type);
        assertEquals(key, cmd.key);
        assertEquals(value, cmd.data.data);
        assertEquals(47, cmd.flags());
        assertEquals(300, cmd.exptime());
        assertEquals(true, cmd.noreply());

    }

    @Test
    void anycmd_simple_expectsok() throws URISyntaxException, IOException {

        // Arrange
        var key = randomKey("asdf");

        // Act
        var cmd = Command.parse(String.format("any %s 0 1 2 3 4 noreply", key));

        // Assert
        assertEquals("any", cmd.type);
        assertEquals(key, cmd.key);
        assertEquals("noreply", cmd.parameterLast().get());
        assertEquals("4", cmd.parameter(4).get());
    }

    @Test
    void setcmd_noexp_expectok() throws URISyntaxException, IOException {

        // Arrange
        var key = randomKey("asdf");
        var cmd = new SetCommand(key, "hello", 0, 0, false);
        var cache = new MemCache();

        // Act
        var context = new CacheContext(cache, cmd);

        // Assert
        assertEquals(true, context.isAlive());
        assertEquals(false, context.isExpired());
    }

    @Test
    void setcmd_exp3s_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cmd = new SetCommand(key, "hello", 0, 3, false);
        var cache = new MemCache();
        var context = new CacheContext(cache, cmd);

        // Act
        Thread.sleep(1000);

        // Assert
        assertEquals(true, context.isAlive());
        assertEquals(false, context.isExpired());
    }

    @Test
    void setcmd_exp1s_expectnotok_after2s() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmd = new SetCommand(key, "hello", 0, 1, false);
        var context = new CacheContext(cache, cmd);
        // Act
        Thread.sleep(2000);

        // Assert
        assertEquals(false, context.isAlive());
        assertEquals(true, context.isExpired());
    }

    @Test
    void addcmd_empy_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmd = new AddCommand(key, "hello", 0, 0, false);

        // Act
        var responseAfterSet = cache.set(cmd);

        // Assert
        assertEquals(true, responseAfterSet.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterSet.get());
    }

    @Test
    void addcmd_exists_expectnotok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmd = new AddCommand(key, "hello", 0, 0, false);
        var responseAfterSet = cache.set(cmd);

        // Act
        var responseAfterSet2 = cache.set(cmd);

        // Assert
        assertEquals(true, responseAfterSet2.isPresent());
        assertEquals(ValidationCode.NOT_STORED, responseAfterSet2.get());
    }

    @Test
    void replacecmd_empty_expectnook() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmd = new ReplaceCommand(key, "hello", 0, 0, false);

        // Act
        var responseAfterSet = cache.set(cmd);

        // Assert
        assertEquals(true, responseAfterSet.isPresent());
        assertEquals(ValidationCode.NOT_STORED, responseAfterSet.get());
    }

    @Test
    void replacecmd_withexisting_expectnook() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "hello1", 0, 0, false);

        var cmdReplace = new ReplaceCommand(key, "hello-2", 0, 0, false);

        // Act
        var responseAfterSet1 = cache.set(cmdSet);
        var responseAfterSet2 = cache.set(cmdReplace);

        // Assert
        assertEquals(true, responseAfterSet1.isPresent());
        assertEquals(true, responseAfterSet2.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterSet2.get());
    }

    @Test
    void cascmd_withempty_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();

        var cmdCas = new CasCommand(key, "hello-2", 0, 0, 1, false);

        // Act
        var responseAfterSet2 = cache.set(cmdCas);

        // Assert
        assertEquals(true, responseAfterSet2.isPresent());
        assertEquals(ValidationCode.NOT_FOUND, responseAfterSet2.get());
    }

    @Test
    void cascmd_withexisting_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "hello1", 0, 0, false);
        var responseAfterSet1 = cache.set(cmdSet);

        var cmdCas = new CasCommand(key, "hello-2", 0, 0, 1, false);

        // Act
        var responseAfterSet2 = cache.set(cmdCas);

        // Assert
        assertEquals(true, responseAfterSet1.isPresent());
        assertEquals(true, responseAfterSet2.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterSet2.get());
    }

    @Test
    void cascmd_withexistingcas10_expectnotok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "hello1", 0, 0, false);
        var responseAfterSet1 = cache.set(cmdSet);

        var cmdCas = new CasCommand(key, "hello-2", 0, 0, 10, false);

        // Act
        var responseAfterSet2 = cache.set(cmdCas);

        // Assert
        assertEquals(true, responseAfterSet1.isPresent());
        assertEquals(true, responseAfterSet2.isPresent());
        assertEquals(ValidationCode.EXISTS, responseAfterSet2.get());
    }

    @Test
    void appendcmd_empty_expectnotok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmd = new AppendCommand(key, "hello", 0, 0, false);

        // Act
        var responseAfterSet = cache.set(cmd);

        // Assert
        assertEquals(true, responseAfterSet.isPresent());
        assertEquals(ValidationCode.NOT_STORED, responseAfterSet.get());
    }

    @Test
    void appendcmd_withexisting_expectnook() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "1234", 0, 0, false);

        var cmdAppend = new AppendCommand(key, "567890", 0, 0, false);
        var cmdGet = new GetCommand(key);

        // Act
        var responseAfterSet1 = cache.set(cmdSet);
        var responseAfterAppend2 = cache.set(cmdAppend);
        var responseAfterGet3 = cache.get(cmdGet);

        // Assert
        assertEquals(true, responseAfterSet1.isPresent());

        assertEquals(true, responseAfterAppend2.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterAppend2.get());

        assertEquals(true, responseAfterGet3.isPresent());
        assertEquals("1234567890", responseAfterGet3.get().data.data);
    }

    @Test
    void prependcmd_empty_expectnotok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmd = new PrependCommand(key, "hello", 0, 0, false);

        // Act
        var responseAfterSet = cache.set(cmd);

        // Assert
        assertEquals(true, responseAfterSet.isPresent());
        assertEquals(ValidationCode.NOT_STORED, responseAfterSet.get());
    }

    @Test
    void prependcmd_withexisting_expectnook() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "1234", 0, 0, false);

        var cmdAppend = new PrependCommand(key, "567890", 0, 0, false);
        var cmdGet = new GetCommand(key);

        // Act
        var responseAfterSet1 = cache.set(cmdSet);
        var responseAfterAppend2 = cache.set(cmdAppend);
        var responseAfterGet3 = cache.get(cmdGet);

        // Assert
        assertEquals(true, responseAfterSet1.isPresent());

        assertEquals(true, responseAfterAppend2.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterAppend2.get());

        assertEquals(true, responseAfterGet3.isPresent());
        assertEquals("5678901234", responseAfterGet3.get().data.data);
    }

    @Test
    void asSetCommand_set_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var cmd0 = new DataCommand(new CommandLine("set key 0 0 5"), new Data("hello"));
        var cmd1 = new DataCommand(new CommandLine("replace key 0 0 5"), new Data("hello"));
        var cmd2 = new DataCommand(new CommandLine("add key 0 0 5"), new Data("hello"));
        var cmd3 = new DataCommand(new CommandLine("append key 0 0 5"), new Data("hello"));
        var cmd4 = new DataCommand(new CommandLine("prepend key 0 0 5"), new Data("hello"));
        var cmd5 = new DataCommand(new CommandLine("cas key 0 0 5 47"), new Data("hello"));
        var cmd6 = new DataCommand(new CommandLine("incr key"), new Data("1"));
        var cmd7 = new DataCommand(new CommandLine("decr key"), new Data("1"));

        // Act
        var setCmd0 = cmd0.asSetCommand();
        var setCmd1 = cmd1.asSetCommand();
        var setCmd2 = cmd2.asSetCommand();
        var setCmd3 = cmd3.asSetCommand();
        var setCmd4 = cmd4.asSetCommand();
        var setCmd5 = cmd5.asSetCommand();
        var setCmd6 = cmd6.asSetCommand();
        var setCmd7 = cmd7.asSetCommand();

        // Assert
        assertEquals(setCmd0.type, "set");
        assertEquals(setCmd1.type, "replace");
        assertEquals(setCmd2.type, "add");
        assertEquals(setCmd3.type, "append");
        assertEquals(setCmd4.type, "prepend");
        assertEquals(setCmd5.type, "cas");
        assertEquals(setCmd6.type, "incr");
        assertEquals(setCmd7.type, "decr");
    }

    @Test
    void write_DataCmd_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var cmd0 = DataCommand.parse("set key 0 0 5", "hello");
        var w = new StringWriter();
        var buf = new BufferedWriter(w);
        // Act
        cmd0.write(buf);
        buf.flush();

        // Assert
        assertEquals("set key 0 0 5\r\nhello\r\n", w.toString());
    }

    @Test
    void write_DataCmdDataEmpty_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var cmd0 = new DataCommand(new CommandLine("set key 0 0 5"), (Data) null);
        var w = new StringWriter();
        var buf = new BufferedWriter(w);
        // Act
        cmd0.write(buf);
        buf.flush();

        // Assert
        assertEquals("set key 0 0 5\r\n", w.toString());
    }

    @Test
    void commandParse_set_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange

        // Act
        var cmd0 = DataCommand.parse("set key 0 0 5", "hello");

        // Assert
        assertEquals("set", cmd0.type);
    }

    @Test
    void newWithTokens_set_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var line = new CommandLine("set key 0 0 5 hello");

        // Act
        var cmd0 = new DataCommand(line, line.getTokens());

        // Assert
        assertEquals("set", cmd0.type);
        assertEquals("hello", cmd0.data.data);

    }

    @Test
    void asSetCommand_set_expectnotok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var cmd0 = new DataCommand(new CommandLine("illegal key 0 0 5"), new Data("hello"));

        // Act
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            var setCmd0 = cmd0.asSetCommand();
        });

        assertTrue(exception.getMessage().contains("is not valid"));

    }

    @Test
    void toResponseString_setCmd_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var cmd0 = new DataCommand(new CommandLine("set key 0 0 5"), new Data("hello"));

        // Act
        var string = cmd0.toResponseString();
        // Assert
        assertEquals("set key 0 0 5\r\nhello\r\n", string);
    }

    @Test
    void asValueCommand_set_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var cmd0 = new DataCommand(new CommandLine("set key 1 300 5"), new Data("hello"));
        // Act
        var valueCmd = cmd0.asValueCommand();
        // Assert
        assertEquals("VALUE key 1 5", valueCmd.commandLine.line);
        assertEquals("hello", valueCmd.data.data);
        assertEquals("VALUE key 1 5\r\nhello\r\n", valueCmd.toResponseString());
    }

    @Test
    void length_setCmd_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var cmd0 = new DataCommand(new CommandLine("set key 1 300 8"), new Data("hello123"));
        // Act
        var len = cmd0.length();

        // Assert
        assertEquals(8, len);
    }

    @Test
    void validationExceptioon_getcmd_expectexception() throws URISyntaxException, IOException, ValidationException {

        // Arrange
        var cmd = new GetCommand("");
        // Act
        Exception exception = assertThrows(ValidationException.class, () -> {
            cmd.validate();
        });

        assertTrue(exception.getMessage().contains("Key is mandatory, but null or empty"));
    }

    @Test
    void asCommand_cmdLine_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var line = new CommandLine("get key");
        // Act
        var cmd = line.asCommand();
        // Assert
        assertEquals("get", cmd.type);
        assertEquals("key", cmd.key);
    }

    @Test
    void asDataCommand_cmdLine_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var line = new CommandLine("set key 0 0 5 hello");
        // Act
        var cmd = (DataCommand) line.asDataCommand();
        // Assert
        assertEquals("set", cmd.type);
        assertEquals("key", cmd.key);
        assertEquals("hello", cmd.data.data);
    }

    @Test
    void getTokens_cmdLineWithEmpty_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var line = new CommandLine("set      key     0   0      5     hello");
        // Act
        var tokens = line.getTokens();
        // Assert
        assertEquals("hello", tokens[tokens.length - 1]);
    }

    @Test
    void getTokens_cmdLine_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var line = new CommandLine("set key 0 0 5 hello");
        // Act
        var tokens = line.getTokens();
        // Assert
        assertEquals("hello", tokens[tokens.length - 1]);
    }

    @Test
    void delete_exists_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "1234", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        var cmdDelete = new DeleteCommand(key);

        // Act
        var responseAfterDelete = cache.delete(cmdDelete.key);

        // Assert
        assertEquals(true, responseAfterDelete.isPresent());
        assertEquals(ValidationCode.DELETED, responseAfterDelete.get());
    }

    @Test
    void delete_notexists_expectnotfound() throws URISyntaxException, IOException, InterruptedException {
        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();

        var cmdDelete = new DeleteCommand(key);

        // Act
        var responseAfterDelete = cache.delete(cmdDelete.key);

        // Assert
        assertEquals(true, responseAfterDelete.isPresent());
        assertEquals(ValidationCode.NOT_FOUND, responseAfterDelete.get());
    }

    @Test
    void getAfterDelete_exists_expectokAndThenNotFound() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "1234", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        var cmdDelete = new DeleteCommand(key);
        var responseAfterDelete = cache.delete(cmdDelete.key);

        // Act
        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(false, responseAfterGet.isPresent());
    }

    @Test
    void incr_exists_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdIncr = new IncrCommand(key, "1");
        var responseAfterIncr = cache.set(cmdIncr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterIncr.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterIncr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals(101, responseAfterGet.get().data.dataInt());
    }

    @Test
    void incrnoreply_exists_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdIncr = new IncrCommand(key, "1", true);
        var responseAfterIncr = cache.set(cmdIncr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterIncr.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterIncr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals(101, responseAfterGet.get().data.dataInt());
    }

    @Test
    void incr_notexists_expectnotfound() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();

        // Act
        var cmdIncr = new IncrCommand(key, "1");
        var responseAfterIncr = cache.set(cmdIncr);

        // Assert
        assertEquals(true, responseAfterIncr.isPresent());
        assertEquals(ValidationCode.NOT_FOUND, responseAfterIncr.get());
    }

    @Test
    void incr_nointeger_expecterror() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "abc", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdIncr = new IncrCommand(key, "1");
        var responseAfterIncr = cache.set(cmdIncr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterIncr.isPresent());
        assertEquals(ValidationCode.CLIENT_ERROR_CANNOT_INCREMENT_OR_DECREMENT_NON_NUMERIC_VALUE,
                responseAfterIncr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals("abc", responseAfterGet.get().data.data); // Arrange

    }

    @Test
    void incr_novalue_expecterror() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdIncr = new IncrCommand(new CommandLine("incr " + key));
        var responseAfterIncr = cache.set(cmdIncr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterIncr.isPresent());
        assertEquals(ValidationCode.ERROR,
                responseAfterIncr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals("100", responseAfterGet.get().data.data); // Arrange

    }

    @Test
    void incrMinus101_exists_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdIncr = new IncrCommand(key, "-101");
        var responseAfterIncr = cache.set(cmdIncr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterIncr.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterIncr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals(-1, responseAfterGet.get().data.dataInt());
    }

    @Test
    void incr101_exists_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdIncr = new IncrCommand(key, "101");
        var responseAfterIncr = cache.set(cmdIncr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterIncr.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterIncr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals(201, responseAfterGet.get().data.dataInt());
    }

    @Test
    void decr_exists_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdDecr = new DecrCommand(key, "1");
        var responseAfterDecr = cache.set(cmdDecr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterDecr.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterDecr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals(99, responseAfterGet.get().data.dataInt());
    }

    @Test
    void decr200_exists_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdDecr = new DecrCommand(key, "200");
        var responseAfterDecr = cache.set(cmdDecr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterDecr.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterDecr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals(-100, responseAfterGet.get().data.dataInt());
    }

    @Test
    void decrnoreply_exists_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdIncr = new DecrCommand(key, "1", true);
        var responseAfterIncr = cache.set(cmdIncr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterIncr.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterIncr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals(99, responseAfterGet.get().data.dataInt());
    }

    @Test
    void decr_notexists_expectnotfound() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();

        // Act
        var cmdDecr = new DecrCommand(key, "1");
        var responseAfterDecr = cache.set(cmdDecr);

        // Assert
        assertEquals(true, responseAfterDecr.isPresent());
        assertEquals(ValidationCode.NOT_FOUND, responseAfterDecr.get());
    }

    @Test
    void decr_nointeger_expecterror() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "abc", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdDecr = new DecrCommand(key, "1");
        var responseAfterDecr = cache.set(cmdDecr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterDecr.isPresent());
        assertEquals(ValidationCode.CLIENT_ERROR_CANNOT_INCREMENT_OR_DECREMENT_NON_NUMERIC_VALUE,
                responseAfterDecr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals("abc", responseAfterGet.get().data.data); // Arrange

    }

    @Test
    void decr_novalue_expecterror() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdDecr = new DecrCommand(new CommandLine("incr " + key));
        var responseAfterDecr = cache.set(cmdDecr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterDecr.isPresent());
        assertEquals(ValidationCode.ERROR,
                responseAfterDecr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals("100", responseAfterGet.get().data.data); // Arrange

    }

    @Test
    void decrMinus101_exists_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdDecr = new DecrCommand(key, "-101");
        var responseAfterDecr = cache.set(cmdDecr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterDecr.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterDecr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals(201, responseAfterGet.get().data.dataInt());
    }

    @Test
    void decr101_exists_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange
        var key = randomKey("asdf");
        var cache = new MemCache();
        var cmdSet = new SetCommand(key, "100", 0, 0, false);
        var responseAfterSet = cache.set(cmdSet);

        // Act
        var cmdDecr = new DecrCommand(key, "101");
        var responseAfterDecr = cache.set(cmdDecr);

        var cmdGet = new GetCommand(key);
        var responseAfterGet = cache.get(cmdGet.key);

        // Assert
        assertEquals(true, responseAfterDecr.isPresent());
        assertEquals(ValidationCode.STORED, responseAfterDecr.get());
        assertEquals(true, responseAfterGet.isPresent());
        assertEquals(-1, responseAfterGet.get().data.dataInt());
    }

    @Test
    void asCommand_T_expectok() throws URISyntaxException, IOException, InterruptedException {

        // Arrange

        // Act
        // Assert
    }

}
