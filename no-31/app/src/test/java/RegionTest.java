/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import qr.QrCode;
import qr.Quality;
import qr.Rect;
import qr.Version;

import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.*;

public class RegionTest {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = RegionTest.class.getResource("tests/"+testfile);
        if (resource != null) {
            File file = Paths.get(resource.toURI()).toFile();
            reader = new FileReader(file);
        }
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test
    public void intersect_50inside_ok() throws URISyntaxException, IOException {
        // Arrange
        var rect100_100 = new Rect(0, 0, 100, 100);
        var rect50_50 = new Rect(0, 0, 50, 50);

        // Act
        var intersection = rect100_100.intersection(rect50_50);

        // Assert
        assertTrue(intersection.isPresent());
        assertEquals(0, intersection.get().x());
        assertEquals(0, intersection.get().y());
        assertEquals(50, intersection.get().width());
        assertEquals(50, intersection.get().height());

    }


    @Test
    public void intersect_50aside_outside() throws URISyntaxException, IOException {
        // Arrange
        var rect100_100 = new Rect(0, 0, 100, 100);
        var rect50_50 = new Rect(100, 100, 50, 50);

        // Act
        var intersection = rect100_100.intersection(rect50_50);

        // Assert
        assertFalse(intersection.isPresent());

    }

}
