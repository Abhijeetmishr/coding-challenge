/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import web.http.Http11Handler;
import web.http.HttpScanner;
import web.http.HttpScanner.HeaderTokenValue;
import web.http.HttpScanner.ProtocolTokenValue;
import web.http.HttpScanner.Token;

class HttpScannerTest {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = HttpScannerTest.class.getResource("tests/" + testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new FileReader(file);
    }

    private static String readAllText(Reader reader) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(reader);
        StringBuilder stringBuilder = new StringBuilder();
        String line;

        while ((line = bufferedReader.readLine()) != null) {
            stringBuilder.append(line);
            stringBuilder.append(System.lineSeparator());
        }

        bufferedReader.close();
        return stringBuilder.toString();
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test
    void next_helloget_expectsProtocol() throws URISyntaxException, IOException {

        // Arrange
        ReadReader("hello.txt");
        var http11 = new Http11Handler("www");
        var text = readAllText(reader);
        var scanner = HttpScanner.fromEscapedString(http11, text);

        // Action
        var token = scanner.next();
        var tokenValue = (ProtocolTokenValue) token.get();

        // Assert
        assertEquals(tokenValue.token, Token.PROTOCOL);
        assertEquals(tokenValue.action, "GET");
        assertEquals(tokenValue.uri, "/hello");
    }

    @Test
    void nextHeader_helloget_expectsProtocol() throws URISyntaxException, IOException {

        // Arrange
        ReadReader("hello.txt");
        var http11 = new Http11Handler("www");
        var text = readAllText(reader);
        var scanner = HttpScanner.fromEscapedString(http11, text);
        var token = scanner.next();

        // Action
        var token2 = scanner.next();
        var tokenValue = (HeaderTokenValue) token2.get();

        // Assert
        assertEquals(tokenValue.token, Token.HEADER);
        assertEquals(tokenValue.key, "Host");
        assertEquals(tokenValue.value, "localhost:8080");
    }

    @Test
    void nextBody_helloget_expectsProtocol() throws URISyntaxException, IOException {

        // Arrange
        ReadReader("hello-post.txt");
        var http11 = new Http11Handler("www");
        var text = readAllText(reader);
        var scanner = HttpScanner.fromEscapedString(http11, text);
        var token = scanner.next();
        var contentLength = 0;
        while (token.isPresent() && !token.get().isBody()) {
            if (token.get().token.equals(Token.HEADER)) {
                var header = (HeaderTokenValue) token.get();
                if (header.key.equalsIgnoreCase("content-length")) {
                    contentLength = Integer.valueOf(header.value);
                }
            }
            token = scanner.next();
        }

        // Action
        var tokenBody = scanner.nextBody(contentLength);

        // Assert
        assertEquals(true, tokenBody.isPresent());
        assertEquals(38, tokenBody.get().body.length);
    }

}
